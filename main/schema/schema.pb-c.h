/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: schema.proto */

#ifndef PROTOBUF_C_schema_2eproto__INCLUDED
#define PROTOBUF_C_schema_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Measure Measure;


/* --- enums --- */


/* --- messages --- */

struct  _Measure
{
  ProtobufCMessage base;
  /*
   * BMI270 
   */
  /*
   * rad/s
   */
  float gyr_x_rads;
  float gyr_y_rads;
  float gyr_z_rads;
  /*
   * g
   */
  float acc_x_g;
  float acc_y_g;
  float acc_z_g;
  /*
   * m/s²
   */
  float acc_x_ms2;
  float acc_y_ms2;
  float acc_z_ms2;
  /*
   * BMM350 
   */
  /*
   * uT
   */
  float mag_x_ut;
  float mag_y_ut;
  float mag_z_ut;
  /*
   * BME688 
   */
  /*
   * °C
   */
  float temp_c;
  /*
   * % (0-100)
   */
  float hum_percent;
  /*
   * hPa
   */
  float press_hpa;
  /*
   * Ohms
   */
  float gas_res_ohms;
};
#define MEASURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&measure__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Measure methods */
void   measure__init
                     (Measure         *message);
size_t measure__get_packed_size
                     (const Measure   *message);
size_t measure__pack
                     (const Measure   *message,
                      uint8_t             *out);
size_t measure__pack_to_buffer
                     (const Measure   *message,
                      ProtobufCBuffer     *buffer);
Measure *
       measure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   measure__free_unpacked
                     (Measure *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Measure_Closure)
                 (const Measure *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor measure__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_schema_2eproto__INCLUDED */
